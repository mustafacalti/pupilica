import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, Send, X, Bot, User, Minimize2, Maximize2 } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

interface ExpertChatProps {
  studentName?: string;
  students?: Array<{ id: string; name: string }>;
  onScheduleGenerated?: (sessions: any[]) => void;
}

export const ExpertChat: React.FC<ExpertChatProps> = ({ studentName, students = [], onScheduleGenerated }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Takvim planlama fonksiyonu
  const parseScheduleRequest = (userMessage: string): any[] => {
    const sessions: any[] = [];
    const currentDate = new Date();
    const message = userMessage.toLowerCase();

    // Takvim anahtar kelimeleri
    const scheduleKeywords = ['planla', 'takvim', 'program', 'zamanla', 'oyun planÄ±', 'seans'];
    const isScheduleRequest = scheduleKeywords.some(keyword => message.includes(keyword));

    if (!isScheduleRequest || students.length === 0) return [];

    // Ã–ÄŸrenci analizi
    const studentMentions = students.filter(student =>
      message.includes(student.name.toLowerCase()) ||
      message.includes(student.name.split(' ')[0].toLowerCase())
    );

    const targetStudents = studentMentions.length > 0 ? studentMentions : students;

    // Oyun tÃ¼rlerini algÄ±la
    const gameTypeKeywords = {
      'count': ['sayÄ±', 'matematik', 'rakam', 'sayma'],
      'conflict': ['renk', 'renkli', 'Ã§atÄ±ÅŸma', 'stroop'],
      'click': ['kelime', 'resim', 'word', 'tÄ±klama', 'hÄ±zlÄ±'],
      'dynamic': ['dikkat', 'odak', 'attention', 'dinamik', 'hareket'],
      'colorRecognition': ['renk tanÄ±ma', 'kamera', 'ai']
    };

    const mentionedGameTypes = Object.keys(gameTypeKeywords).filter(gameType =>
      gameTypeKeywords[gameType].some(keyword => message.includes(keyword))
    );

    // SÃ¼re ve frekans analizi
    const durationMatch = message.match(/(\d+)\s*(dakika|dk|minute)/);
    const defaultDuration = durationMatch ? parseInt(durationMatch[1]) : 20;

    const frequencyMatch = message.match(/(\d+)\s*(kez|kere|defa)/);
    const weeklyFrequency = frequencyMatch ? parseInt(frequencyMatch[1]) : 3;

    // GÃ¼nleri algÄ±la
    const dayMentions = {
      'pazartesi': 1, 'pzt': 1, 'salÄ±': 2, 'sal': 2, 'Ã§arÅŸamba': 3, 'Ã§ar': 3,
      'perÅŸembe': 4, 'per': 4, 'cuma': 5, 'cum': 5, 'cumartesi': 6, 'cmt': 6, 'pazar': 0, 'paz': 0
    };

    const mentionedDays = Object.entries(dayMentions).filter(([day]) =>
      message.includes(day)
    ).map(([, dayNum]) => dayNum);

    // Seanslar oluÅŸtur
    targetStudents.forEach((student, studentIndex) => {
      const studentGameTypes = mentionedGameTypes.length > 0 ? mentionedGameTypes : Object.keys(gameTypeKeywords);
      const sessionsPerWeek = Math.max(1, Math.min(weeklyFrequency, 7));

      for (let i = 0; i < sessionsPerWeek; i++) {
        const gameType = studentGameTypes[i % studentGameTypes.length];

        let sessionDate: Date;
        if (mentionedDays.length > 0) {
          const dayIndex = i % mentionedDays.length;
          const targetDay = mentionedDays[dayIndex];
          sessionDate = new Date(currentDate);
          const daysUntilTarget = (targetDay - currentDate.getDay() + 7) % 7;
          sessionDate.setDate(currentDate.getDate() + daysUntilTarget);
        } else {
          sessionDate = new Date(currentDate);
          const daysAhead = Math.floor((i * 7) / sessionsPerWeek) + 1;
          sessionDate.setDate(currentDate.getDate() + daysAhead);
        }

        const baseHour = 14 + (studentIndex * 2);
        const sessionHour = baseHour + Math.floor(i / 2);
        sessionDate.setHours(sessionHour, i % 2 === 0 ? 0 : 30, 0, 0);

        const session = {
          id: `ai-chat-${Date.now()}-${studentIndex}-${i}`,
          studentId: student.id,
          studentName: student.name,
          gameType: gameType,
          date: sessionDate,
          duration: defaultDuration,
          reminder: true,
          status: 'planned',
          aiGenerated: true
        };

        sessions.push(session);
      }
    });

    return sessions.sort((a, b) => a.date.getTime() - b.date.getTime());
  };

  // AI Uzman yanÄ±tlarÄ±
  const generateAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();

    // Takvim planlama talebi kontrolÃ¼
    const scheduleKeywords = ['planla', 'takvim', 'program', 'zamanla', 'oyun planÄ±', 'seans'];
    const isScheduleRequest = scheduleKeywords.some(keyword => message.includes(keyword));

    if (isScheduleRequest && students.length > 0) {
      const generatedSessions = parseScheduleRequest(userMessage);

      if (generatedSessions.length > 0 && onScheduleGenerated) {
        // Takvim seanslarÄ±nÄ± Ã¼st bileÅŸene gÃ¶nder
        setTimeout(() => {
          onScheduleGenerated(generatedSessions);
        }, 1000);

        const gameTypes = {
          'count': 'ðŸ”¢ Dikkat Sayma',
          'conflict': 'ðŸŽ¨ Ã‡atÄ±ÅŸma Oyunu',
          'click': 'ðŸŽ¯ Dikkat TÄ±klama',
          'dynamic': 'âš¡ Dinamik Dikkat',
          'colorRecognition': 'ðŸ“· AI Renk TanÄ±ma'
        };

        const sessionsText = generatedSessions.map(session =>
          `â€¢ ${session.studentName} - ${gameTypes[session.gameType]} (${session.date.toLocaleDateString('tr-TR')} ${session.date.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })})`
        ).join('\n');

        return `âœ… MÃ¼kemmel! Size ${generatedSessions.length} oyun seansÄ± planladÄ±m:\n\n${sessionsText}\n\nðŸ¤– Bu seanslar otomatik olarak takvime eklenecek. Takvim sayfasÄ±nda mor renkli seanslar olarak gÃ¶rebilirsiniz.\n\nðŸ“… Takvimi aÃ§mak iÃ§in "HÄ±zlÄ± Ä°ÅŸlemler" bÃ¶lÃ¼mÃ¼ndeki "Oyun Takvimi" butonuna tÄ±klayabilirsiniz.`;
      }

      return `Takvim planlamasÄ± iÃ§in daha detaylÄ± bilgi vermelisiniz. Ã–rneÄŸin:\n\nâ€¢ "Ahmet iÃ§in haftada 3 kez sayÄ± oyunlarÄ± planla"\nâ€¢ "Her Ã§ocuk iÃ§in gÃ¼nde 20 dakika oyun zamanla"\nâ€¢ "Pazartesi ve Ã§arÅŸamba dikkat oyunlarÄ± ekle"\n\nHangi Ã§ocuk, hangi oyun tÃ¼rÃ¼ ve ne sÄ±klÄ±kla oynamak istediÄŸinizi belirtin.`;
    }

    if (message.includes('dikkat') || message.includes('odaklanma')) {
      return `Dikkat geliÅŸimi iÃ§in ÅŸunlarÄ± Ã¶nerebilirim:\n\nâ€¢ Dikkat sprint oyunlarÄ±nÄ± gÃ¼nde 10-15 dakika oynayÄ±n\nâ€¢ Tek bir aktiviteye odaklanma sÃ¼resini kademeli olarak artÄ±rÄ±n\nâ€¢ Oyun sÄ±rasÄ±nda Ã§evre seslerini minimize edin\nâ€¢ BaÅŸarÄ±lÄ± odaklanma anlarÄ±nÄ± Ã¶dÃ¼llendirin\n\n${studentName ? `${studentName} iÃ§in Ã¶zel olarak, mevcut dikkat sÃ¼resi verilerinize bakarak daha detaylÄ± Ã¶neriler verebilirim.` : ''}`;
    }

    if (message.includes('duygu') || message.includes('mood') || message.includes('Ã¼zgÃ¼n') || message.includes('mutlu')) {
      return `Duygusal geliÅŸim Ã§ok Ã¶nemli. ÅžunlarÄ± dikkate alÄ±n:\n\nâ€¢ Oyun sÄ±rasÄ±ndaki duygu deÄŸiÅŸimlerini takip edin\nâ€¢ Pozitif duygular hakimken Ã¶ÄŸrenme daha etkili oluyor\nâ€¢ Negatif duygular varsa ara verin ve rahatlatÄ±cÄ± aktiviteler yapÄ±n\nâ€¢ DuygularÄ± ifade etmeyi Ã¶ÄŸretin\n\n${studentName ? `${studentName}'in son oyunlardaki duygu analizlerine gÃ¶re, genel olarak pozitif bir ruh halinde. Bu harika bir geliÅŸim!` : ''}`;
    }

    if (message.includes('oyun') || message.includes('game') || message.includes('aktivite')) {
      return `Oyun seÃ§imi iÃ§in Ã¶nerilerim:\n\nâ€¢ Ã‡ocuÄŸun sevdiÄŸi oyun tÃ¼rlerini Ã¶nceliklendirin\nâ€¢ ZorluÄŸu kademeli olarak artÄ±rÄ±n\nâ€¢ GÃ¼nde 30-45 dakika ideal oyun sÃ¼resi\nâ€¢ FarklÄ± oyun tÃ¼rlerini dengeleyin (sayÄ±, renk, dikkat, kelime)\n\n${studentName ? `${studentName}'in en sevdiÄŸi oyun tÃ¼rÃ¼ verilerinize gÃ¶re kiÅŸisel Ã¶neriler hazÄ±rlayabilirim.` : ''}`;
    }

    if (message.includes('geliÅŸim') || message.includes('ilerleme') || message.includes('baÅŸarÄ±')) {
      return `GeliÅŸim takibi iÃ§in:\n\nâ€¢ HaftalÄ±k ilerleme grafiklerini dÃ¼zenli inceleyin\nâ€¢ KÃ¼Ã§Ã¼k baÅŸarÄ±larÄ± kutlayÄ±n\nâ€¢ Gerilemeler normaldir, sabÄ±rlÄ± olun\nâ€¢ Uzun vadeli hedefler belirleyin\n\n${studentName ? `${studentName}'in son verilerine bakarak, Ã§ok iyi bir ilerleme kaydediyor!` : ''}`;
    }

    if (message.includes('merhaba') || message.includes('selam') || message.includes('hello')) {
      return `Merhaba! Ben PeakFokus AI UzmanÄ±. ${studentName ? `${studentName}'in geliÅŸimi` : 'Ã‡ocuÄŸunuzun geliÅŸimi'} hakkÄ±nda sorularÄ±nÄ±zÄ± yanÄ±tlamaya hazÄ±rÄ±m.\n\nSize ÅŸu konularda yardÄ±mcÄ± olabilirim:\nâ€¢ Dikkat geliÅŸimi\nâ€¢ Duygusal durum\nâ€¢ Oyun Ã¶nerileri\nâ€¢ GeliÅŸim takibi\nâ€¢ Ã–ÄŸrenme stratejileri\n\nNasÄ±l yardÄ±mcÄ± olabilirim?`;
    }

    // Genel yanÄ±t
    return `AnlayabildiÄŸim kadarÄ±yla ${message} konusunda yardÄ±m istiyorsunuz.\n\nBen PeakFokus AI UzmanÄ± olarak ÅŸu konularda detaylÄ± yardÄ±m saÄŸlayabilirim:\n\nâ€¢ ðŸŽ¯ Dikkat ve odaklanma teknikleri\nâ€¢ ðŸ˜Š Duygusal geliÅŸim desteÄŸi\nâ€¢ ðŸŽ® Oyun Ã¶nerileri ve stratejileri\nâ€¢ ðŸ“ˆ GeliÅŸim takibi ve deÄŸerlendirme\nâ€¢ ðŸ§  Ã–ÄŸrenme zorluklarÄ±na Ã§Ã¶zÃ¼mler\n\nDaha spesifik bir soru sorabilirsiniz. ${studentName ? `${studentName}'in` : 'Ã‡ocuÄŸunuzun'} hangi konudaki geliÅŸimi hakkÄ±nda konuÅŸmak istersiniz?`;
  };

  const sendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // AI yanÄ±tÄ± iÃ§in 1-2 saniye gecikme
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputText),
        sender: 'ai',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, Math.random() * 1000 + 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // Ä°lk aÃ§Ä±lÄ±ÅŸta hoÅŸ geldin mesajÄ±
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        text: `Merhaba! Ben PeakFokus AI UzmanÄ±. ${studentName ? `${studentName}'in geliÅŸimi` : 'Ã‡ocuÄŸunuzun geliÅŸimi'} hakkÄ±nda sorularÄ±nÄ±zÄ± yanÄ±tlamaya hazÄ±rÄ±m.\n\nSize nasÄ±l yardÄ±mcÄ± olabilirim?`,
        sender: 'ai',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
  }, [isOpen, studentName]);

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-gradient-to-r from-primary to-secondary text-white p-4 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 z-40"
      >
        <MessageCircle className="h-6 w-6" />
      </button>
    );
  }

  return (
    <div className={`fixed bottom-6 right-6 bg-white rounded-lg shadow-2xl border border-gray-200 z-50 transition-all duration-300 ${
      isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
    }`}>
      {/* Header */}
      <div className="bg-gradient-to-r from-primary to-secondary text-white p-4 rounded-t-lg flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Bot className="h-5 w-5" />
          <span className="font-semibold">AI Uzman DesteÄŸi</span>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setIsMinimized(!isMinimized)}
            className="p-1 hover:bg-white/20 rounded"
          >
            {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
          </button>
          <button
            onClick={() => {
              setIsOpen(false);
              setIsMinimized(false);
            }}
            className="p-1 hover:bg-white/20 rounded"
          >
            <X className="h-4 w-4" />
          </button>
        </div>
      </div>

      {!isMinimized && (
        <>
          {/* Messages */}
          <div className="flex-1 p-4 space-y-4 overflow-y-auto h-[480px]">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex items-start space-x-2 max-w-[80%] ${
                  message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                }`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm ${
                    message.sender === 'user' ? 'bg-primary' : 'bg-secondary'
                  }`}>
                    {message.sender === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                  </div>
                  <div className={`p-3 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-primary text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    <div className="whitespace-pre-wrap text-sm">{message.text}</div>
                    <div className={`text-xs mt-1 ${
                      message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                    }`}>
                      {message.timestamp.toLocaleTimeString('tr-TR', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-start space-x-2">
                  <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center text-white text-sm">
                    <Bot className="h-4 w-4" />
                  </div>
                  <div className="bg-gray-100 p-3 rounded-lg">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="UzmanÄ±mÄ±za sorunuzu yazÄ±n..."
                className="flex-1 resize-none border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                rows={2}
              />
              <button
                onClick={sendMessage}
                disabled={!inputText.trim() || isTyping}
                className="bg-primary text-white p-2 rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="h-4 w-4" />
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};