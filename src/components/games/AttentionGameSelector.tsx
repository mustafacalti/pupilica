import React, { useState, useRef } from 'react';
import { Card, CardContent } from '../ui/Card';
import { Button } from '../ui/Button';
import { EmotionResult } from '../../types';
import { AttentionCountGame } from './AttentionCountGame';
import { AttentionDynamicGame } from './AttentionDynamicGame';
import { ConflictGame } from './ConflictGame';
import { ColorRecognitionGame } from './ColorRecognitionGame';
import {
  Target,
  Hash,
  Zap,
  Brain,
  ArrowLeft,
  Star,
  Clock,
  MousePointer,
  Palette,
  Camera
} from 'lucide-react';

interface AttentionGameSelectorProps {
  studentId: string;
  studentAge?: number;
  onGameComplete: (score: number, duration: number, emotions: EmotionResult[]) => void;
  onEmotionDetected?: (emotion: EmotionResult) => void;
}

type GameType = 'count' | 'dynamic' | 'conflict' | 'colorRecognition';
type DifficultyLevel = 'kolay' | 'orta' | 'zor';

interface GameInfo {
  id: GameType;
  name: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  bgGradient: string;
  features: string[];
}

export const AttentionGameSelector: React.FC<AttentionGameSelectorProps> = ({
  studentId,
  studentAge = 12,
  onGameComplete,
  onEmotionDetected
}) => {
  const [selectedGame, setSelectedGame] = useState<GameType | null>(null);
  const [selectedDifficulty, setSelectedDifficulty] = useState<DifficultyLevel>('orta');
  const [gameStarted, setGameStarted] = useState(false);

  const prevPropsRef = useRef({ studentId, studentAge, onGameComplete, onEmotionDetected });
  const renderCountRef = useRef(0);
  renderCountRef.current += 1;

  // Props deƒüi≈üiklik kontrol√º
  const propsChanged =
    prevPropsRef.current.studentId !== studentId ||
    prevPropsRef.current.studentAge !== studentAge ||
    prevPropsRef.current.onGameComplete !== onGameComplete ||
    prevPropsRef.current.onEmotionDetected !== onEmotionDetected;

  console.log('üîÑ [RENDER] AttentionGameSelector render edildi:', {
    renderCount: renderCountRef.current,
    selectedGame,
    selectedDifficulty,
    gameStarted,
    propsChanged,
    changedProps: propsChanged ? {
      studentId: prevPropsRef.current.studentId !== studentId,
      studentAge: prevPropsRef.current.studentAge !== studentAge,
      onGameComplete: prevPropsRef.current.onGameComplete !== onGameComplete,
      onEmotionDetected: prevPropsRef.current.onEmotionDetected !== onEmotionDetected
    } : 'none',
    timestamp: new Date().toISOString()
  });

  prevPropsRef.current = { studentId, studentAge, onGameComplete, onEmotionDetected };

  const gameTypes: GameInfo[] = [
    {
      id: 'count',
      name: 'Dikkat Sayma',
      description: 'Beliren objeleri sayarak konsantrasyon geli≈ütirme',
      icon: <Hash className="h-8 w-8" />,
      color: 'green',
      bgGradient: 'from-green-500 to-emerald-500',
      features: [
        'Sayƒ±sal dikkat',
        'G√∂rsel takip',
        'Konsantrasyon geli≈ütirme',
        'Bellek destekleme'
      ]
    },
    {
      id: 'dynamic',
      name: 'Dinamik Dikkat',
      description: 'S√ºrekli √ßƒ±kan hedefleri hƒ±zla yakalama',
      icon: <Zap className="h-8 w-8" />,
      color: 'purple',
      bgGradient: 'from-purple-500 to-pink-500',
      features: [
        '√áoklu hedef takibi',
        'Hƒ±zlƒ± karar verme',
        'Reflexleri geli≈ütirme',
        'S√ºrekli dikkat'
      ]
    },
    {
      id: 'conflict',
      name: '√áatƒ±≈üma Oyunu',
      description: 'Stroop etkisi ile dikkat geli≈ütirme',
      icon: <Palette className="h-8 w-8" />,
      color: 'red',
      bgGradient: 'from-red-500 to-orange-500',
      features: [
        'Stroop etkisi deneyimi',
        'Renk-kelime √ßatƒ±≈ümasƒ±',
        'Dikkat odaklanma',
        'Bili≈üsel esneklik'
      ]
    },
    {
      id: 'colorRecognition',
      name: 'AI Renk Tanƒ±ma',
      description: 'AI se√ßtiƒüi rengi kameraya g√∂sterme oyunu',
      icon: <Camera className="h-8 w-8" />,
      color: 'indigo',
      bgGradient: 'from-indigo-500 to-purple-500',
      features: [
        'AI destekli renk se√ßimi',
        'Ger√ßek zamanlƒ± renk tanƒ±ma',
        'Kamera etkile≈üimi',
        '5 saniye odaklanma'
      ]
    }
  ];

  const difficultyLevels = [
    {
      id: 'kolay' as DifficultyLevel,
      name: 'Kolay',
      description: 'Yeni ba≈ülayanlar i√ßin',
      color: 'green',
      features: ['Az dikkat daƒüƒ±tƒ±cƒ±', 'Uzun s√ºre limiti', 'Basit hedefler']
    },
    {
      id: 'orta' as DifficultyLevel,
      name: 'Orta',
      description: 'Deneyimliler i√ßin',
      color: 'yellow',
      features: ['Orta dikkat daƒüƒ±tƒ±cƒ±', 'Normal s√ºre', 'Karma≈üƒ±k hedefler']
    },
    {
      id: 'zor' as DifficultyLevel,
      name: 'Zor',
      description: 'Uzmanlar i√ßin',
      color: 'red',
      features: ['√áok dikkat daƒüƒ±tƒ±cƒ±', 'Kƒ±sa s√ºre', 'Karƒ±≈üƒ±k hedefler']
    }
  ];

  const handleGameSelect = (gameType: GameType) => {
    console.log('üéÆ [DEBUG] Game selected:', gameType);
    setSelectedGame(gameType);
  };

  const handleDifficultySelect = (difficulty: DifficultyLevel) => {
    console.log('üéØ [DEBUG] Difficulty selected:', difficulty);
    setSelectedDifficulty(difficulty);
    console.log('üéØ [DEBUG] Selected difficulty updated to:', difficulty);
  };

  const handleStartGame = () => {
    console.log('üéÆ [DEBUG] Starting game:', selectedGame, 'difficulty:', selectedDifficulty);
    setGameStarted(true);
  };

  const handleBackToSelector = () => {
    setSelectedGame(null);
    setSelectedDifficulty('orta');
    setGameStarted(false);
  };

  const handleGameCompleteWithReturn = (score: number, duration: number, emotions: EmotionResult[]) => {
    onGameComplete(score, duration, emotions);
    setGameStarted(false);
  };

  // Eƒüer oyun ba≈üladƒ±ysa, se√ßilen oyunu render et
  if (gameStarted && selectedGame) {
    console.log('üöÄ [DEBUG] Rendering game:', selectedGame, 'with props:', {
      studentId,
      studentAge,
      difficulty: selectedDifficulty
    });

    const commonProps = {
      studentId,
      studentAge,
      difficulty: selectedDifficulty,
      onGameComplete: handleGameCompleteWithReturn,
      onEmotionDetected
    };

    try {
      switch (selectedGame) {
        case 'count':
          console.log('üî¢ [DEBUG] Loading AttentionCountGame');
          return <AttentionCountGame {...commonProps} />;
        case 'dynamic':
          console.log('‚ö° [DEBUG] Loading AttentionDynamicGame');
          return <AttentionDynamicGame {...commonProps} />;
        case 'conflict':
          console.log('üé® [DEBUG] Loading ConflictGame');
          return <ConflictGame {...commonProps} />;
        case 'colorRecognition':
          console.log('üì∑ [DEBUG] Loading ColorRecognitionGame');
          return <ColorRecognitionGame studentId={studentId} studentAge={studentAge} onGameComplete={handleGameCompleteWithReturn} onEmotionDetected={onEmotionDetected} />;
        default:
          console.error('‚ùå [DEBUG] Unknown game type:', selectedGame);
          return null;
      }
    } catch (error) {
      console.error('‚ùå [DEBUG] Error rendering game:', error);
      return (
        <div className="max-w-2xl mx-auto p-8 text-center">
          <h2 className="text-xl font-bold text-red-600 mb-4">Oyun Y√ºklenirken Hata Olu≈ütu</h2>
          <p className="text-gray-600 mb-4">Hata: {error.message}</p>
          <Button onClick={handleBackToSelector}>
            Geri D√∂n
          </Button>
        </div>
      );
    }
  }

  // Zorluk se√ßimi ekranƒ±
  if (selectedGame) {
    const gameInfo = gameTypes.find(g => g.id === selectedGame)!;
    console.log('üéØ [DEBUG] Zorluk se√ßim ekranƒ± a√ßƒ±ldƒ±. Oyun:', selectedGame, 'Mevcut zorluk:', selectedDifficulty);

    return (
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <Card>
          <CardContent className="flex items-center justify-between py-4">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleBackToSelector}
                className="text-gray-600 hover:text-gray-800"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Geri D√∂n
              </Button>
              <div className="flex items-center space-x-3">
                <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${gameInfo.bgGradient} flex items-center justify-center text-white`}>
                  {gameInfo.icon}
                </div>
                <div>
                  <h2 className="text-xl font-bold text-gray-800">{gameInfo.name}</h2>
                  <p className="text-sm text-gray-600">Zorluk seviyesi se√ß</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Brain className="h-5 w-5 text-purple-600" />
              <span className="text-sm text-purple-600">Adaptif AI</span>
            </div>
          </CardContent>
        </Card>

        {/* Zorluk Se√ßimi */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {difficultyLevels.map((level) => (
            <Card
              key={level.id}
              className={`
                cursor-pointer transition-all duration-200 hover:scale-105 pointer-events-auto
                ${selectedDifficulty === level.id
                  ? 'ring-2 ring-blue-500 shadow-lg'
                  : 'hover:shadow-md'
                }
              `}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('üñ±Ô∏è [DEBUG] Card clicked for difficulty:', level.id, 'Game:', selectedGame);
                handleDifficultySelect(level.id);
              }}
              onMouseDown={(e) => {
                e.preventDefault();
                console.log('üñ±Ô∏è [DEBUG] MouseDown for difficulty:', level.id);
                handleDifficultySelect(level.id);
              }}
              style={{ zIndex: 1 }}
            >
              <CardContent className="text-center py-8 pointer-events-none">
                <div className="mb-4">
                  <div className={`
                    w-16 h-16 mx-auto rounded-full flex items-center justify-center text-2xl font-bold
                    ${level.color === 'green' ? 'bg-green-100 text-green-600' :
                      level.color === 'yellow' ? 'bg-yellow-100 text-yellow-600' :
                      'bg-red-100 text-red-600'
                    }
                  `}>
                    {level.id === 'kolay' ? '1' : level.id === 'orta' ? '2' : '3'}
                  </div>
                </div>

                <h3 className="text-xl font-bold text-gray-800 mb-2">{level.name}</h3>
                <p className="text-gray-600 text-sm mb-4">{level.description}</p>

                <div className="space-y-2">
                  {level.features.map((feature, index) => (
                    <div key={index} className="flex items-center justify-center space-x-2 text-sm text-gray-700">
                      <Star className="h-3 w-3 text-gray-400" />
                      <span>{feature}</span>
                    </div>
                  ))}
                </div>

                {selectedDifficulty === level.id && (
                  <div className="mt-4">
                    <div className="w-6 h-6 mx-auto bg-blue-500 rounded-full flex items-center justify-center">
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                    </div>
                  </div>
                )}

                <div className="mt-4 pointer-events-auto">
                  <button
                    className="w-full py-2 px-4 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      console.log('üîò [DEBUG] Button clicked for difficulty:', level.id);
                      handleDifficultySelect(level.id);
                    }}
                  >
                    {selectedDifficulty === level.id ? '‚úì Se√ßili' : 'Se√ß'}
                  </button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Ba≈ülat Butonu */}
        <div className="text-center">
          <Button
            onClick={handleStartGame}
            size="lg"
            className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-8 py-3"
          >
            <Target className="h-5 w-5 mr-2" />
            {gameInfo.name} - {difficultyLevels.find(d => d.id === selectedDifficulty)?.name} Ba≈ülat
          </Button>
        </div>
      </div>
    );
  }

  // Ana oyun se√ßim ekranƒ±
  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <Card>
        <CardContent className="text-center py-8">
          <div className="mb-4">
            <div className="w-20 h-20 mx-auto bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
              <Brain className="h-10 w-10 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Dikkat Oyunlarƒ±</h1>
          <p className="text-gray-600 text-lg">
            Dikkat daƒüƒ±nƒ±klƒ±ƒüƒ±yla ba≈üa √ßƒ±kmak i√ßin √∂zel olarak tasarlanmƒ±≈ü oyunlar
          </p>
          <div className="mt-4 flex items-center justify-center space-x-2 text-sm text-purple-600">
            <Clock className="h-4 w-4" />
            <span>AI destekli adaptif zorluk sistemi</span>
          </div>
        </CardContent>
      </Card>

      {/* Oyun T√ºrleri */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {gameTypes.map((game) => (
          <Card
            key={game.id}
            className="cursor-pointer transition-all duration-200 hover:scale-105 hover:shadow-lg"
            onClick={() => handleGameSelect(game.id)}
          >
            <CardContent className="text-center py-8">
              <div className="mb-6">
                <div className={`w-16 h-16 mx-auto rounded-full bg-gradient-to-r ${game.bgGradient} flex items-center justify-center text-white`}>
                  {game.icon}
                </div>
              </div>

              <h3 className="text-xl font-bold text-gray-800 mb-3">{game.name}</h3>
              <p className="text-gray-600 text-sm mb-6">{game.description}</p>

              <div className="space-y-3">
                {game.features.map((feature, index) => (
                  <div key={index} className="flex items-center space-x-2 text-sm text-gray-700">
                    <div className={`w-2 h-2 rounded-full ${
                      game.color === 'blue' ? 'bg-blue-400' :
                      game.color === 'green' ? 'bg-green-400' :
                      game.color === 'purple' ? 'bg-purple-400' :
                      game.color === 'indigo' ? 'bg-indigo-400' :
                      'bg-red-400'
                    }`}></div>
                    <span>{feature}</span>
                  </div>
                ))}
              </div>

              <div className="mt-6">
                <Button
                  onClick={() => handleGameSelect(game.id)}
                  className={`w-full ${
                    game.color === 'blue' ? 'bg-blue-500 hover:bg-blue-600' :
                    game.color === 'green' ? 'bg-green-500 hover:bg-green-600' :
                    game.color === 'purple' ? 'bg-purple-500 hover:bg-purple-600' :
                    game.color === 'indigo' ? 'bg-indigo-500 hover:bg-indigo-600' :
                    'bg-red-500 hover:bg-red-600'
                  } text-white`}
                >
                  Oyna
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Bilgi kartƒ± */}
      <Card className="bg-gradient-to-r from-blue-50 to-purple-50">
        <CardContent className="py-6">
          <div className="flex items-start space-x-4">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
              <Brain className="h-6 w-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">AI Destekli Adaptif Sistem</h3>
              <p className="text-gray-700 text-sm">
                Her oyun, performansƒ±na g√∂re otomatik olarak zorluk seviyesini ayarlar.
                Ba≈üarƒ± oranƒ±na, reaksiyon s√ºresine ve odaklanma durumuna g√∂re
                ki≈üiselle≈ütirilmi≈ü g√∂revler √ºretir. Bu sayede her zaman en uygun
                zorluk seviyesinde oynayarak dikkat becerilerini geli≈ütirebilirsin.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};